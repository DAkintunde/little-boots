#include "mbed.h"
#include "rtos.h"
 
//Photointerrupter input pins
#define I1pin D2
#define I2pin D11
#define I3pin D12
 
//Incremental encoder input pins
#define CHA   D7
#define CHB   D8  
 
//Motor Drive output pins   //Mask in output byte
#define L1Lpin D4           //0x01
#define L1Hpin D5           //0x02
#define L2Lpin D3           //0x04
#define L2Hpin D6           //0x08
#define L3Lpin D9           //0x10
#define L3Hpin D10          //0x20
 
//Mapping from sequential drive states to motor phase outputs
/*
State   L1  L2  L3
0       H   -   L
1       -   H   L
2       L   H   -
3       L   -   H
4       -   L   H
5       H   L   -
6       -   -   -
7       -   -   -
*/
//Drive state to output table
const int8_t driveTable[] = {0x12,0x18,0x09,0x21,0x24,0x06,0x00,0x00};
 
//Mapping from interrupter inputs to sequential rotor states. 0x00 and 0x07 are not valid
const int8_t stateMap[] = {0x07,0x05,0x03,0x04,0x01,0x00,0x02,0x07};  
//const int8_t stateMap[] = {0x07,0x01,0x03,0x02,0x05,0x00,0x04,0x07}; //Alternative if phase order of input or drive is reversed
 
//Status LED
DigitalOut led1(LED1);
 
//Photointerrupter inputs
DigitalIn I1(I1pin);
DigitalIn I2(I2pin);
DigitalIn I3(I3pin);
 
//Motor Drive outputs
DigitalOut L1L(L1Lpin);
DigitalOut L1H(L1Hpin);
DigitalOut L2L(L2Lpin);
DigitalOut L2H(L2Hpin);
DigitalOut L3L(L3Lpin);
DigitalOut L3H(L3Hpin);
 
//Set a given drive state
void motorOut(int8_t driveState){
    
    //Lookup the output byte from the drive state.
    int8_t driveOut = driveTable[driveState & 0x07];
      
    //Turn off first
    if (~driveOut & 0x01) L1L = 0;
    if (~driveOut & 0x02) L1H = 1;
    if (~driveOut & 0x04) L2L = 0;
    if (~driveOut & 0x08) L2H = 1;
    if (~driveOut & 0x10) L3L = 0;
    if (~driveOut & 0x20) L3H = 1;
    
    //Then turn on
    if (driveOut & 0x01) L1L = 1;
    if (driveOut & 0x02) L1H = 0;
    if (driveOut & 0x04) L2L = 1;
    if (driveOut & 0x08) L2H = 0;
    if (driveOut & 0x10) L3L = 1;
    if (driveOut & 0x20) L3H = 0;
    }
    
    //Convert photointerrupter inputs to a rotor state
inline int8_t readRotorState(){
    return stateMap[I1 + 2*I2 + 4*I3];
    }
 
//Basic synchronisation routine    
int8_t motorHome() {
    //Put the motor in drive state 0 and wait for it to stabilise
    motorOut(0);
    wait(1.0);
    
    //Get the rotor state
    return readRotorState();
}

Ticker angleStepTicker;
Ticker pwmTicker;

const uint16_t angleSubdivisions = 1000; //number of subdivisions in 1 rotation
const uint8_t coilSubdivisions = angleSubdivisions/6; //number of subdivisions between 2 coils

const uint8_t angleStepFreq = 100; //frequency at which the rotor angle is updated
const uint16_t pwmFreq = 1000;  //frequency at which the coil outputs are updated

uint16_t angle = 0;  //rotor angle needing to be output
int16_t angleStep;  //rotor angle step at each update
uint8_t coilNumber;  //rotor coil needing to be output to

int8_t orState = 0;    //Rotot offset at motor state 0

uint8_t pwmCounter = 0;  //counter that steps every time pwm is checked
const uint8_t pwmStep = pwmFreq*coilSubdivisions/angleStepFreq;  //step of pwm counter at each pwm update
uint8_t pwmThreshold;  //threshold above which the active coil changes

int16_t rpsToAngle(float rps){  //converts user input rps to correct angle change per update for the used update frequency
    return rps*angleSubdivisions/angleStepFreq;
}

void angleUpdate(){ //function that works out and sets the next values of coilNumber and pwmThreshold
   angle = (angle + angleStep + angleSubdivisions)%angleSubdivisions; //update angle to new value and wrap if it exceeds 1 rotation
   
   coilNumber = angle/coilSubdivisions; //update which coil to output to
   pwmThreshold = angle%coilSubdivisions; //update pwd threshold
}
   
   
void motorPWM(){//function that implements the pwm of the motor coils
    pwmCounter += pwmStep; //step pwm counter and zero if it exceds the value mapped to 100%
    if(pwmCounter >= coilSubdivisions){
        pwmCounter = 0;
        motorOut((coilNumber+1-orState+6)%6);//output alternate coil state to motor
    }
    
    if(pwmCounter >= pwmThreshold){
        motorOut((coilNumber-orState+6)%6); //output original coil state to motor
    }
}


//Main
int main() {
    //Initialise the serial port
    Serial pc(SERIAL_TX, SERIAL_RX);
    pc.printf("Hello\n\r");
    
    //Run the motor synchronisation
    orState = motorHome();
    pc.printf("Rotor origin: %x\n\r",orState);
    //orState is subtracted from future rotor state inputs to align rotor and motor states
    
    pc.printf("Enter Rotations and Speed to begin");
    
    while (1) {
        float R, V;
        pc.scanf("R%5f", &R);
        pc.scanf("V%5f", &V);
        pc.printf("%f rotations requested at %f Rps\n\r",R, V);
        
        angleStep = rpsToAngle(V);
        pwmTicker.attach(&motorPWM, 1/((float)pwmFreq));
        angleStepTicker.attach(&angleUpdate, 1/((float)angleStepFreq));
        
        while(!pc.readable()){
            //pc.printf("angle = %d\tcoil number = %d\tthreshold = %d\r\n",angle, coilNumber, pwmThreshold);
            //wait(0.1);
        }
    }
}
